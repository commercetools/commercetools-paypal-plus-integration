buildscript {

    // we need to share Spring boot version across buildscript and the rest of the application. Unfortunately, this
    // is only the one known way:
    // https://discuss.gradle.org/t/how-to-access-project-ext-variables-from-within-buildscript-section/5706/3
    ext.springBoot = '1.5.9.RELEASE'
    ext.grgitVersion = '2.1.1'
    ext.testLoggerVersion = '1.1.2'
    ext.dockerPackageVersion = '3.2.5'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBoot")
        classpath("org.ajoberstar:grgit:$grgitVersion")
        classpath("com.adarshr:gradle-test-logger-plugin:$testLoggerVersion")
    }
}

repositories {
    jcenter()
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.adarshr.test-logger'

targetCompatibility = 1.8
sourceCompatibility = 1.8

version = '0.3.0-DEV' // this will be replaced by git tag version, if available

apply from: "$rootDir/gradle/version-resolver.gradle"
apply from: "$rootDir/gradle/docker-build.gradle"


jar {
    version = project.version
    archiveName = "${rootProject.name}.jar"
    manifest {
        attributes("Implementation-Title": rootProject.name,
                "Implementation-Version": version)
    }
}

final depVersions = [
        springBoot         : ext.springBoot,
        commercetoolsSdkJvm: '1.27.0',
        paypalPlusSdk      : '1.14.0',
        guava              : '23.6-jre',
        apacheCollections  : '4.1',

        // tests
        assertJ            : '3.8.0',
        systemRules        : '1.17.0'
]

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web:${depVersions.springBoot}"

    compile "com.paypal.sdk:rest-api-sdk:${depVersions.paypalPlusSdk}"

    compile "com.commercetools.sdk.jvm.core:commercetools-models:${depVersions.commercetoolsSdkJvm}"
    compile "com.commercetools.sdk.jvm.core:commercetools-java-client:${depVersions.commercetoolsSdkJvm}"
    compile "com.commercetools.sdk.jvm.core:commercetools-convenience:${depVersions.commercetoolsSdkJvm}"
    compile "com.google.guava:guava:${depVersions.guava}"
    compile "org.apache.commons:commons-collections4:${depVersions.apacheCollections}"

    // TODO: exclude from testCompile -> include to testIntegrationCompile
    testCompile("org.springframework.boot:spring-boot-starter-test:${depVersions.springBoot}") {
        exclude group: 'org.assertj', module: 'assertj-core' // below override the default outdated one with the latest
    }

    testCompile "org.assertj:assertj-core:${depVersions.assertJ}"
    testCompile "com.github.stefanbirkner:system-rules:${depVersions.systemRules}"
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

testlogger {
    theme 'mocha'
    slowThreshold 20000
}

// https://www.petrikainulainen.net/programming/gradle/getting-started-with-gradle-integration-testing/
// https://www.michael-bull.com/blog/2016/06/04/separating-integration-and-unit-tests-with-gradle
// https://discuss.gradle.org/t/separate-execution-for-java-unit-and-integration-tests/8713

// TODO: carry out to separate script

final testsRootDir = 'src/test'
final testsCommonsDir = "${testsRootDir}/common"
final testsUnitDir = "${testsRootDir}/unit"
final testsIntegrationDir = "${testsRootDir}/integration"

sourceSets {
    testCommon {
        java {
            srcDirs = ["$testsCommonsDir/java"]
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
        resources.srcDirs = ["$testsCommonsDir/resources"]
    }

    test {
        java {
            srcDirs = ["$testsUnitDir/java"]
            compileClasspath += main.output + testCommon.output
            runtimeClasspath += main.output + testCommon.output
        }
        resources.srcDirs = ["$testsUnitDir/resources"]
    }

    testIntegration {
        java {
            srcDirs = ["$testsIntegrationDir/java"]
            compileClasspath += main.output + testCommon.output
            runtimeClasspath += main.output + testCommon.output
        }
        resources.srcDirs = ["$testsIntegrationDir/resources"]
    }
}

configurations {
    testCommonCompile.extendsFrom compile
    testCommonRuntime.extendsFrom runtime

    // TODO: make extend compile/runtime, avoid testCompile/Runtime
    testIntegrationCompile.extendsFrom testCompile
    testIntegrationRuntime.extendsFrom testRuntime
}

task testIntegration(type: Test) {
    description "Run only the integration tests from ${sourceSets.testIntegration.java.srcDirs}."
    testClassesDirs = sourceSets.testIntegration.output.classesDirs
    classpath = sourceSets.testIntegration.runtimeClasspath
    outputs.upToDateWhen { false }
}

task testUnit(dependsOn: test) {
    description "Run only the unit tests from ${sourceSets.test.java.srcDirs}. This is an alias for :test task"
}

// tasks ordering
// Ensure integration tests are run after unit tests and are part of check/build
compileTestCommonJava.dependsOn classes
compileTestJava.dependsOn classes, testCommonClasses
compileTestIntegrationJava.dependsOn classes, testCommonClasses
testIntegration.mustRunAfter test
check.dependsOn test, testIntegration
build.dependsOn test, testIntegration

// setup test sources/resources in Intellij IDEA
// https://stackoverflow.com/questions/42064377/mark-gradle-source-folder-as-test-source-in-intellij
// https://intellij-support.jetbrains.com/hc/en-us/community/posts/115000608270-Gradle-additional-test-source-folders
// https://youtrack.jetbrains.com/issue/IDEA-151925#comment=27-2355076
idea {
    module {
        testSourceDirs += project.sourceSets.testCommon.java.srcDirs
        testSourceDirs += project.sourceSets.testIntegration.java.srcDirs
    }
}
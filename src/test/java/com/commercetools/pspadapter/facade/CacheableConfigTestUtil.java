package com.commercetools.pspadapter.facade;

import java.util.function.Function;
import java.util.function.Supplier;

import static org.assertj.core.api.Assertions.assertThat;

public class CacheableConfigTestUtil {

    /**
     * Assert that:<ul>
     * <li>the instances generated by {@code sameConfigSupplier} are different references, but equal to each other</li>
     * <li>{@code cacheableFactoryMethod}:<ul>
     * <li>produces the same instances if called twice with same instance</li>
     * <li>produces the same instances if called with other but equal instance</li>
     * </ul>
     * </li>
     * </ul>
     *
     * @param factory                 factory instance, just to ensure it is not null
     * @param sameConfigSupplier      config generator. Sequential call of this method should produce different references,
     *                                but actual instances should be equal (in meaning of
     *                                <code>{@link Object#equals(Object)} == true</code>)
     * @param differentConfigSupplier config generator which produces instance not equal to values from
     *                                {@code sameConfigSupplier}
     * @param cacheableFactoryMethod  method which should produce the same instances, if passed equal configs.
     * @param <FACTORY>
     * @param <CONFIG>
     * @param <VALUE>
     */
    public static <FACTORY, CONFIG, VALUE> void assertFactoryMethodCaching(
            FACTORY factory,
            Supplier<CONFIG> sameConfigSupplier,
            Supplier<CONFIG> differentConfigSupplier,
            Function<CONFIG, VALUE> cacheableFactoryMethod) {
        assertThat(factory).isNotNull();

        // different instances of the same config
        CONFIG config1 = sameConfigSupplier.get();
        CONFIG config3 = sameConfigSupplier.get();
        CONFIG configDifferent = differentConfigSupplier.get();

        // but they are expected to be equal
        assertThat(config1).isNotSameAs(config3);
        assertThat(config1).isEqualTo(config3);

        assertThat(config1.hashCode()).isEqualTo(config3.hashCode());
        assertThat(configDifferent).isNotEqualTo(config1);
        assertThat(configDifferent).isNotEqualTo(config3);

        // value1 and value2 created from the same instance, client3 - from different but equal instance,
        // but all fetched from factory methods should be the same instance
        VALUE value1 = cacheableFactoryMethod.apply(config1);
        VALUE value2 = cacheableFactoryMethod.apply(config1);
        VALUE value3 = cacheableFactoryMethod.apply(config3);
        VALUE valueDifferent = cacheableFactoryMethod.apply(configDifferent);

        assertThat(value1).isNotNull();
        assertThat(value1).isSameAs(value2);
        assertThat(value1).isSameAs(value3);
        assertThat(valueDifferent).isNotEqualTo(value1);
        assertThat(valueDifferent).isNotEqualTo(value2);
        assertThat(valueDifferent).isNotEqualTo(value3);
    }

}